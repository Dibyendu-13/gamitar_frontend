{"ast":null,"code":"const express = require(\"express\");\nconst http = require(\"http\");\nconst {\n  Server\n} = require(\"socket.io\");\nconst cors = require(\"cors\");\nconst app = express();\n\n// Enable CORS with specific origin (replace with your ngrok URL)\nconst corsOptions = {\n  origin: \"https://cda3-43-241-193-32.ngrok-free.app\",\n  // Replace with your ngrok URL\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"]\n};\napp.use(cors(corsOptions));\nconst server = http.createServer(app);\n\n// Enable CORS for Socket.IO\nconst io = new Server(server, {\n  cors: {\n    origin: \"https://cda3-43-241-193-32.ngrok-free.app\",\n    // Replace with your ngrok URL\n    methods: [\"GET\", \"POST\"]\n  }\n});\nlet grid = Array(10).fill(null).map(() => Array(10).fill(\"\"));\nlet playerCount = 0;\nlet history = [];\nlet batch = [];\n\n// Emit grouped updates every second (set up only once)\nsetInterval(() => {\n  if (batch.length > 0) {\n    io.emit(\"grouped-updates\", batch);\n    batch = [];\n  }\n}, 1000);\nio.on(\"connection\", socket => {\n  playerCount++;\n  console.log(`Player connected. Total players: ${playerCount}`);\n  io.emit(\"player-count\", playerCount); // Notify all clients of updated player count\n\n  // Emit the current grid and history to the newly connected client\n  socket.emit(\"grid-update\", grid);\n  socket.emit(\"grid-history\", history);\n  socket.on(\"update-grid\", ({\n    row,\n    col,\n    char\n  }) => {\n    if (grid[row][col]) return; // Prevent overwriting\n\n    grid[row][col] = char;\n    const timestamp = new Date().toISOString();\n    const update = {\n      row,\n      col,\n      char,\n      timestamp\n    };\n    history.push(update); // Add to history\n    batch.push(update); // Add to batch for grouped updates\n\n    // Notify all clients of the updated grid and history\n    io.emit(\"grid-update\", grid);\n    io.emit(\"grid-history\", history);\n  });\n  socket.on(\"disconnect\", () => {\n    playerCount--;\n    console.log(`Player disconnected. Total players: ${playerCount}`);\n    io.emit(\"player-count\", playerCount); // Notify all clients of updated player count\n  });\n});\nserver.listen(4000, () => {\n  console.log(\"Server running on http://localhost:4000\");\n});","map":{"version":3,"names":["express","require","http","Server","cors","app","corsOptions","origin","methods","use","server","createServer","io","grid","Array","fill","map","playerCount","history","batch","setInterval","length","emit","on","socket","console","log","row","col","char","timestamp","Date","toISOString","update","push","listen"],"sources":["/Users/dibyendubar/gamitar/gamitar_frontend/src/components/Grid.js"],"sourcesContent":["const express = require(\"express\");\nconst http = require(\"http\");\nconst { Server } = require(\"socket.io\");\nconst cors = require(\"cors\");\n\nconst app = express();\n\n// Enable CORS with specific origin (replace with your ngrok URL)\nconst corsOptions = {\n  origin: \"https://cda3-43-241-193-32.ngrok-free.app\", // Replace with your ngrok URL\n  methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n};\napp.use(cors(corsOptions));\n\nconst server = http.createServer(app);\n\n// Enable CORS for Socket.IO\nconst io = new Server(server, {\n  cors: {\n    origin: \"https://cda3-43-241-193-32.ngrok-free.app\", // Replace with your ngrok URL\n    methods: [\"GET\", \"POST\"],\n  },\n});\n\nlet grid = Array(10)\n  .fill(null)\n  .map(() => Array(10).fill(\"\"));\nlet playerCount = 0;\nlet history = [];\nlet batch = [];\n\n// Emit grouped updates every second (set up only once)\nsetInterval(() => {\n  if (batch.length > 0) {\n    io.emit(\"grouped-updates\", batch);\n    batch = [];\n  }\n}, 1000);\n\nio.on(\"connection\", (socket) => {\n  playerCount++;\n  console.log(`Player connected. Total players: ${playerCount}`);\n  io.emit(\"player-count\", playerCount); // Notify all clients of updated player count\n\n  // Emit the current grid and history to the newly connected client\n  socket.emit(\"grid-update\", grid);\n  socket.emit(\"grid-history\", history);\n\n  socket.on(\"update-grid\", ({ row, col, char }) => {\n    if (grid[row][col]) return; // Prevent overwriting\n\n    grid[row][col] = char;\n    const timestamp = new Date().toISOString();\n    const update = { row, col, char, timestamp };\n\n    history.push(update); // Add to history\n    batch.push(update); // Add to batch for grouped updates\n\n    // Notify all clients of the updated grid and history\n    io.emit(\"grid-update\", grid);\n    io.emit(\"grid-history\", history);\n  });\n\n  socket.on(\"disconnect\", () => {\n    playerCount--;\n    console.log(`Player disconnected. Total players: ${playerCount}`);\n    io.emit(\"player-count\", playerCount); // Notify all clients of updated player count\n  });\n});\n\nserver.listen(4000, () => {\n  console.log(\"Server running on http://localhost:4000\");\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}